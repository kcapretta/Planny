//
//  TableTimerInterfaceController.swift
//  Planny WatchKit Extension
//
//  Created by Kassandra Capretta on 2/17/20.
//  Copyright Â© 2020 Kassandra Capretta. All rights reserved.
//

import WatchKit
import Foundation
import HealthKit

// ProperTime
class TableTimerInterfaceController: WKInterfaceController {
    
    //MARK:- Interface Builder
    @IBOutlet weak var deviceLabel: WKInterfaceLabel!
    @IBOutlet weak var countdownTimer: WKInterfaceLabel!
    @IBOutlet weak var dataLabel: WKInterfaceLabel!
    @IBOutlet weak var playPause: WKInterfaceButton!
    // Card Number
    @IBOutlet weak var cardNumber: WKInterfaceLabel!
    @IBOutlet weak var outOfNumber: WKInterfaceLabel!
    
    //CHANGES
    //MARK:- Properties
    var counter : ProperTime!
    var timer : Timer!
    var selectedData = DataProvided()
    var paused = false
    var secs = 0
    var typeSelection: String?
    
    var session = WKExtendedRuntimeSession()
    
    //MARK:- ViewController LifeCycle Methods
    override func awake(withContext context: Any?) {
        
        let numberOfDevice = Int() + 1
        
        // Communicate Unique ID
        // THIS IS A PART OF "awsCall" Function
//        if UserDefaults.standard.string(forKey: "deviceUUID") == nil {
//            let uuid = NSUUID()
//            UserDefaults.standard.set(uuid.uuidString, forKey: "deviceUUID")
//            print("First time...", uuid.uuidString, "Int")
//        } else {
//            let savedUUIDString = UserDefaults.standard.string(forKey: "deviceUUID") ?? ""
//            let uuid = NSUUID(uuidString: savedUUIDString)
//            print("Previously saved", savedUUIDString, uuid, numberOfDevice)
//        }
        
        super.awake(withContext: context)
        let dataProvided = context as! DataProvided
        counter = ProperTime(timeString: dataProvided.time)
        self.selectedData = dataProvided
        dataLabel.setText(self.selectedData.title)
        cardNumber.setText(self.selectedData.cardNumberData)
        outOfNumber.setText(self.selectedData.outOfNumberData)
        let healthStore = HKHealthStore()
        
        func execute(_ query: HKQuery) {
        }
        
        func extendedRuntimeSessionDidStart(_ extendedRuntimeSession: WKExtendedRuntimeSession) {
            session.delegate = self as? WKExtendedRuntimeSessionDelegate
            session.start()
            
        }
        
        func extendedRuntimeSessionWillExpire(_ extendedRuntimeSession: WKExtendedRuntimeSession) {

        }
        
        func extendedRuntimeSession(_ extendedRuntimeSession: WKExtendedRuntimeSession, didInvalidateWith reason: WKExtendedRuntimeSessionInvalidationReason, error: Error?) {
            // Track when your session ends.
            // Also handle errors here.
        }
    }
    
    override func willActivate() {
        super.willActivate()
        deviceLabel.setText(typeSelection ?? "ðŸ˜´")
        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        
    }
    
    override func didDeactivate() {
        // This method is called when watch view controller is no longer visible
        super.didDeactivate()
        timer?.invalidate()
        timer = nil
    }
    
    //MARK:- Private Methods
    @objc func updateTimer() {
        // SECONDS DISPLAY ON SCREEN
        print("Counter ", counter)
        
        // TIMER VISUALS CURRENTLY HIDDEN
//                        countdownTimer.setText("\(counter ?? 0)")
//                    countdownTimer.self = timeString(time: TimeInterval("\(counter ?? 0)") as! TimeInterval)
        
        countdownTimer.setText(counter.toString())
        
        if(counter.finished) {
            if timer != nil {
                timer.invalidate()
                //                session.invalidate()
                timer = nil
            }
            let playImage = UIImage(named: "Play")
            playPause.setBackgroundImage(playImage)
            WKInterfaceDevice.current().play(.success)
             pushController(withName: "CheckmarkInterfaceController", context: nil)
                        countdownTimer.setText("0")
        } else {
            counter = counter.substracting(numberOfSeconds: 1)
        }
        
    }
    
    @IBAction func playPauseTapped() {
        // Play
        paused = !paused
        if paused {
            awsCall("pausedTapped")
            // Pause Tapped
            let playImage = UIImage(named: "Play")
            playPause.setBackgroundImage(playImage)
            if(timer != nil)
            {
                timer.invalidate()
            }
            timer = nil
        } else {
            awsCall("playTappedAgain")
            let playImage = UIImage(named: "Pause")
            playPause.setBackgroundImage(playImage)
            timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(TimerInterfaceController.updateTimer), userInfo: nil, repeats: true)
        }
    }
    
    @IBAction func devicePressed() {
        awsCall("deviceButtonPressed")
//        let playImage = UIImage(named: "Pause")
//        playPause.setBackgroundImage(playImage)
//        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(TimerInterfaceController.updateTimer), userInfo: nil, repeats: true)
        print("selection...", typeSelection)
        pushController(withName: "DeviceConnectInterfaceController", context: self)
    }
    
    //MAR!K:- API Call
    func awsCall(_ direction: String?) {
//        guard let savedUUIDString = UserDefaults.standard.string(forKey: "deviceUUID") else { return }
//
//        let json: [String: Any] = ["body": savedUUIDString, "direction": direction ?? ""]
//        let uuid = NSUUID(uuidString: savedUUIDString)
//        let jsonData = try? JSONSerialization.data(withJSONObject: json)
//
//        let urlLink = URL(string: "WEBSITE GOES HERE")
//        guard let url = urlLink else { return }
//        var request = URLRequest(url: url)
//        request.httpMethod = "POST"
//
//        let apiUUID = "\(savedUUIDString)"
//
//        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
//            if let response = response as? HTTPURLResponse {
//                print("Response... ", response.statusCode)
//                print("Response... 2 ", response.mimeType)
//            }
//            if error == nil {
//                print("Data communicated to AWS")
//                if data != nil {
//                    let responseJSON = try? JSONSerialization.jsonObject(with: data!, options: [])
//                    print("JSON...", responseJSON)
//
//                } else {
//                    print("Data sending error")
//                }
//            }
//        }
//        task.resume()
    }
}
